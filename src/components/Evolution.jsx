import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';

const Evolution = () => {
  const navigate = useNavigate();

  // 20 different egg images for Stage 1 (replace with your actual paths)
  const eggStages = [
    '/creatures/egg1.png',
    '/creatures/egg2.png',
    '/creatures/egg3.png',
    '/creatures/egg4.png',
    '/creatures/egg5.png',
    '/creatures/egg6.png',
    '/creatures/egg7.png',
    '/creatures/egg8.png',
    '/creatures/egg9.png',
    '/creatures/egg10.png',
    '/creatures/egg11.png',
    '/creatures/egg12.png',
    '/creatures/egg13.png',
    '/creatures/egg14.png',
    '/creatures/egg15.png',
    '/creatures/egg16.png',
    '/creatures/egg17.png',
    '/creatures/egg18.png',
    '/creatures/egg19.png',
    '/creatures/egg20.png',
  ];

  // Creature stages for examples (full stages for inspiration)
  const cyberPhoenixStages = [
    '/creatures/cyber-phoenix-egg.png',
    '/creatures/cyber-phoenix-stage2.png',
    '/creatures/cyber-phoenix-stage3.png',
    '/creatures/cyber-phoenix-stage4.png',
    '/creatures/cyber-phoenix-stage5.png',
    '/creatures/cyber-phoenix-stage6.png',
  ];

  const quantumSerpentStages = [
    '/creatures/quantum-serpent-egg.png',
    '/creatures/quantum-serpent-stage2.png',
    '/creatures/quantum-serpent-stage3.png',
    '/creatures/quantum-serpent-stage4.png',
    '/creatures/quantum-serpent-stage5.png',
    '/creatures/quantum-serpent-stage6.png',
  ];

  const neonScorpionStages = [
    '/creatures/neon-scorpion-egg.png',
    '/creatures/neon-scorpion-stage2.png',
    '/creatures/neon-scorpion-stage3.png',
    '/creatures/neon-scorpion-stage4.png',
    '/creatures/neon-scorpion-stage5.png',
    '/creatures/neon-scorpion-stage6.png',
  ];

  // State for example creature stages (cycling on hover)
  const [creatureStages, setCreatureStages] = useState({
    cyberPhoenix: 1,
    quantumSerpent: 1,
    neonScorpion: 1,
  });

  // State for hover states of examples
  const [hoverStates, setHoverStates] = useState({
    cyberPhoenix: false,
    quantumSerpent: false,
    neonScorpion: false,
  });

  // State for AI-generated creature and wallet
  const [aiCreature, setAiCreature] = useState(null); // { stage, eggImage }
  const [lastGenerated, setLastGenerated] = useState(null); // Timestamp of last generation
  const [isGenerating, setIsGenerating] = useState(false);
  const [walletConnected, setWalletConnected] = useState(false); // Track wallet connection

  // Creature rarities for examples
  const creatureRarities = {
    cyberPhoenix: 85,
    quantumSerpent: 92,
    neonScorpion: 78,
  };

  // Simulate AI random generation (only Stage 1 for now, requires wallet)
  const generateRandomCreature = () => {
    if (!walletConnected) {
      alert('Please connect your wallet before generating a creature!');
      return;
    }
    if (isGenerating) return; // Prevent multiple generations
    setIsGenerating(true);
    const eggImage = eggStages[Math.floor(Math.random() * eggStages.length)];
    setAiCreature({ stage: 1, eggImage });
    setLastGenerated(new Date());
    setIsGenerating(false);
    alert(`Your Mysterious Cybernetic Egg (Stage 1) has been generated by AI! Check back in ${Math.floor(12 + Math.random() * 4)} hours to see its evolution and uncover its true identity.`);
  };

  // Check if 12–16 hours have passed (simulated, not real-time for now)
  const canCheckBack = () => {
    if (!lastGenerated) return false;
    const now = new Date();
    const hoursPassed = (now - new Date(lastGenerated)) / (1000 * 60 * 60); // Hours since last generation
    return hoursPassed >= 12 && hoursPassed <= 16;
  };

  useEffect(() => {
    // Particle effects for mind-blowing experience, confined to screen
    const particles = [];
    const particleCount = 150; // Maintain count for mind-blowing effect

    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'evolution-particle';
      particle.style.left = `${Math.random() * 90}vw`; // Limit to 90vw to stay within screen
      particle.style.top = `${Math.random() * -100}vh`; // Start above screen
      particle.style.animationDelay = `${Math.random() * 15}s`; // Slower delay for gradual drop
      document.querySelector('.evolution-container').appendChild(particle);
      particles.push(particle);
    }

    // Stage cycling on hover for examples
    const intervals = {};

    Object.keys(hoverStates).forEach(creature => {
      if (hoverStates[creature]) {
        intervals[creature] = setInterval(() => {
          setCreatureStages(prev => ({
            ...prev,
            [creature]: (prev[creature] % eval(`${creature}Stages`).length) + 1,
          }));
        }, 1000); // Cycle every 2 seconds
      }
    });

    return () => {
      Object.values(intervals).forEach(interval => clearInterval(interval));
      particles.forEach(particle => particle.remove());
    };
  }, [hoverStates, cyberPhoenixStages.length, quantumSerpentStages.length, neonScorpionStages.length]);

  const handleMouseEnter = (creature) => {
    setHoverStates(prev => ({
      ...prev,
      [creature]: true,
    }));
  };

  const handleMouseLeave = (creature) => {
    setHoverStates(prev => ({
      ...prev,
      [creature]: false,
    }));
    // Reset stage to 1 when hover ends
    setCreatureStages(prev => ({
      ...prev,
      [creature]: 1,
    }));
  };

  const handleNavClick = (path, e) => {
    e.preventDefault();
    console.log(`Navigating to ${path}`); // Debug log to track navigation
    navigate(path);
  };

  // Simulate wallet connection
  const handleWalletConnect = () => {
    setWalletConnected(true);
    alert('Wallet connected successfully! You can now generate a creature.');
  };

  return (
    <div className="evolution-container" style={{ overflow: 'hidden' }}> {/* Prevent horizontal scrolling */}
      <nav className="navbar">
        <div className="logo">SymbioEngine</div>
        <ul className="links">
          <li><a href="#home" onClick={(e) => handleNavClick('/', e)}>Home</a></li>
          <li><a href="#about" onClick={(e) => handleNavClick('/about', e)}>About</a></li>
          <li><a href="#marketplace" onClick={(e) => handleNavClick('/marketplace', e)}>Marketplace</a></li>
          <li><a href="#profile" onClick={(e) => handleNavClick('/profile', e)}>Profile</a></li>
        </ul>
      </nav>

      <div className="evolution-content">
        <h1 className="mind-blowing-title">Evolution Center</h1>
        <h2 className="mind-blowing-slogan">
          Enter the AI Nexus—watch as mysterious cybernetic eggs emerge randomly, potentially unlocking legendary power in a neon-lit blockchain universe!
        </h2>

        <div className="creature-examples">
          {/* Cyber Phoenix (Left, for inspiration with stage cycling) */}
          <div 
            className="creature-example" 
            onMouseEnter={() => handleMouseEnter('cyberPhoenix')}
            onMouseLeave={() => handleMouseLeave('cyberPhoenix')}
          >
            <h2 className="creature-name">Cyber Phoenix</h2>
            <img
              src={cyberPhoenixStages[creatureStages.cyberPhoenix - 1]}
              alt={`Cyber Phoenix Stage ${creatureStages.cyberPhoenix}`}
              className="creature-image cyber-phoenix vibrant"
            />
            <div className="rarity-bar">
              <span className="rarity-text">Rarity {creatureRarities.cyberPhoenix}</span>
              <div className="rarity-progress" style={{ width: `${creatureRarities.cyberPhoenix}%` }}></div>
            </div>
            <p className="stage-text">Stage: {creatureStages.cyberPhoenix} / {cyberPhoenixStages.length}</p>
            <p className="creature-description">A cybernetic phoenix egg, evolving through AI’s neon brilliance.</p>
          </div>

          {/* Neon Scorpion (Center, for inspiration with stage cycling) */}
          <div 
            className="creature-example" 
            onMouseEnter={() => handleMouseEnter('neonScorpion')}
            onMouseLeave={() => handleMouseLeave('neonScorpion')}
          >
            <h2 className="creature-name">Neon Scorpion</h2>
            <img
              src={neonScorpionStages[creatureStages.neonScorpion - 1]}
              alt={`Neon Scorpion Stage ${creatureStages.neonScorpion}`}
              className="creature-image neon-scorpion vibrant"
            />
            <div className="rarity-bar">
              <span className="rarity-text">Rarity {creatureRarities.neonScorpion}</span>
              <div className="rarity-progress" style={{ width: `${creatureRarities.neonScorpion}%` }}></div>
            </div>
            <p className="stage-text">Stage: {creatureStages.neonScorpion} / {neonScorpionStages.length}</p>
            <p className="creature-description">A neon-lit scorpion egg, striking with futuristic precision.</p>
          </div>

          {/* Quantum Serpent (Right, for inspiration with stage cycling) */}
          <div 
            className="creature-example" 
            onMouseEnter={() => handleMouseEnter('quantumSerpent')}
            onMouseLeave={() => handleMouseLeave('quantumSerpent')}
          >
            <h2 className="creature-name">Quantum Serpent</h2>
            <img
              src={quantumSerpentStages[creatureStages.quantumSerpent - 1]}
              alt={`Quantum Serpent Stage ${creatureStages.quantumSerpent}`}
              className="creature-image quantum-serpent vibrant"
            />
            <div className="rarity-bar">
              <span className="rarity-text">Rarity {creatureRarities.quantumSerpent}</span>
              <div className="rarity-progress" style={{ width: `${creatureRarities.quantumSerpent}%` }}></div>
            </div>
            <p className="stage-text">Stage: {creatureStages.quantumSerpent} / {quantumSerpentStages.length}</p>
            <p className="creature-description">A quantum-powered serpent egg, guarding the blockchain realm’s secrets.</p>
          </div>
        </div>

        <div className="ai-generation-form" style={{ marginTop: '60px' }}>
          {aiCreature ? (
            <div className="ai-creature-display mind-blowing-animation" style={{ textAlign: 'center', maxWidth: '400px', margin: '0 auto' }}>
              <h2 className="mind-blowing-egg-name">Mysterious Cybernetic Egg</h2>
              <img
                src={aiCreature.eggImage}
                alt="Mysterious Cybernetic Egg Stage 1"
                className="creature-image ai-generated vibrant single-border"
                onError={(e) => console.error('Image failed to load:', e.target.src)} // Debug image loading
              />
              <div className="rarity-bar">
                <span className="rarity-text">Rarity ? (Reveal in 12–16 hours)</span>
                <div className="rarity-progress" style={{ width: '50%' }}></div> {/* Placeholder rarity */}
              </div>
              <p className="stage-text mind-blowing-stage">Stage: {aiCreature.stage}</p>
              <p className="mind-blowing-message">
                Your egg is in its initial phase. Check back in {Math.floor(12 + Math.random() * 4)} hours to witness its evolution and uncover its true identity!
              </p>
            </div>
          ) : (
            <div className={`generate-button-container ${!walletConnected ? 'no-border' : ''}`} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', height: 'calc(100vh - 300px)', width: '100vw', maxWidth: '100%' }}>
              <button 
                className="generate-btn mind-blowing-animation" 
                onClick={generateRandomCreature} 
                disabled={!walletConnected || isGenerating}
              >
                {isGenerating ? 'Generating...' : 'Unleash Random Egg'}
              </button>
              <button 
                className="wallet-connect-btn mind-blowing-animation" 
                onClick={handleWalletConnect} 
                disabled={walletConnected}
              >
                {walletConnected ? 'Wallet Connected' : 'Wallet Connect'}
              </button>
              {!walletConnected ? (
                <>
                  <p className="mind-blowing-note">Connect Wallet to Generate</p>
                  <p className="mind-blowing-note">AI will randomly craft your egg—luck may unveil a legendary creature after 12–16 hours!</p>
                </>
              ) : (
                <p className="mind-blowing-note">AI will randomly craft your egg—luck may unveil a legendary creature after 12–16 hours!</p>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Evolution;